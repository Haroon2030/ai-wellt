// Demo Page JavaScript

// Chat Bot Responses
const botResponses = {
    "ŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜŸä ÿ™ŸàŸÅŸäÿ± ÿßŸÑŸÖÿßŸÑÿü": "ÿ•ŸÑŸäŸÉ ÿ®ÿπÿ∂ ÿßŸÑŸÜÿµÿßÿ¶ÿ≠ ÿßŸÑÿ∞ŸÉŸäÿ© ŸÑŸÑÿ™ŸàŸÅŸäÿ±:\n\n‚Ä¢ ÿ±ÿßÿ¨ÿπ ŸÖÿµÿ±ŸàŸÅÿßÿ™ŸÉ ÿßŸÑÿ¥Ÿáÿ±Ÿäÿ© Ÿàÿ≠ÿØÿØ ÿßŸÑŸÜŸÅŸÇÿßÿ™ ÿ∫Ÿäÿ± ÿßŸÑÿ∂ÿ±Ÿàÿ±Ÿäÿ©\n‚Ä¢ ÿ∂ÿπ ŸáÿØŸÅ ÿßÿØÿÆÿßÿ± ÿ¥Ÿáÿ±Ÿä ŸÖÿ≠ÿØÿØ (10-20% ŸÖŸÜ ÿØÿÆŸÑŸÉ)\n‚Ä¢ ÿßÿ≥ÿ™ÿÆÿØŸÖ ŸÇÿßÿπÿØÿ© 50/30/20: 50% ŸÑŸÑÿßÿ≠ÿ™Ÿäÿßÿ¨ÿßÿ™ÿå 30% ŸÑŸÑÿ±ÿ∫ÿ®ÿßÿ™ÿå 20% ŸÑŸÑÿßÿØÿÆÿßÿ±\n‚Ä¢ ŸÇÿßÿ±ŸÜ ÿßŸÑÿ£ÿ≥ÿπÿßÿ± ŸÇÿ®ŸÑ ÿßŸÑÿ¥ÿ±ÿßÿ°\n‚Ä¢ ÿßÿ≥ÿ™ŸÅÿØ ŸÖŸÜ ÿßŸÑÿπÿ±Ÿàÿ∂ ŸàÿßŸÑÿÆÿµŸàŸÖÿßÿ™\n\nŸáŸÑ ÿ™ÿ±ŸäÿØ ŸÖŸÜŸä ÿ•ŸÜÿ¥ÿßÿ° ÿÆÿ∑ÿ© ÿßÿØÿÆÿßÿ± ŸÖÿÆÿµÿµÿ© ŸÑŸÉÿü",
    
    "ŸÖÿß ŸáŸä ŸÖÿµÿ±ŸàŸÅÿßÿ™Ÿä Ÿáÿ∞ÿß ÿßŸÑÿ¥Ÿáÿ±ÿü": "ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ÿ™ÿ≠ŸÑŸäŸÑ ÿ≠ÿ≥ÿßÿ®ŸÉÿå ÿ•ŸÑŸäŸÉ ŸÖŸÑÿÆÿµ ŸÖÿµÿ±ŸàŸÅÿßÿ™ŸÉ ŸÑŸáÿ∞ÿß ÿßŸÑÿ¥Ÿáÿ±:\n\n‚Ä¢ ÿßŸÑÿ∑ÿπÿßŸÖ ŸàÿßŸÑŸÖÿ∑ÿßÿπŸÖ: 1,200 ÿ±ŸäÿßŸÑ (30%)\n‚Ä¢ ÿßŸÑÿ™ÿ≥ŸàŸÇ: 800 ÿ±ŸäÿßŸÑ (20%)\n‚Ä¢ ÿßŸÑŸÖŸàÿßÿµŸÑÿßÿ™: 600 ÿ±ŸäÿßŸÑ (15%)\n‚Ä¢ ÿßŸÑÿ™ÿ±ŸÅŸäŸá: 500 ÿ±ŸäÿßŸÑ (12.5%)\n‚Ä¢ ÿßŸÑŸÅŸàÿßÿ™Ÿäÿ±: 700 ÿ±ŸäÿßŸÑ (17.5%)\n‚Ä¢ ÿ£ÿÆÿ±Ÿâ: 200 ÿ±ŸäÿßŸÑ (5%)\n\nÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÖÿµÿ±ŸàŸÅÿßÿ™: 4,000 ÿ±ŸäÿßŸÑ\n\nŸÑÿßÿ≠ÿ∏ÿ™ ÿ≤ŸäÿßÿØÿ© ŸÅŸä ŸÖÿµÿ±ŸàŸÅÿßÿ™ ÿßŸÑŸÖÿ∑ÿßÿπŸÖ ÿ®ŸÜÿ≥ÿ®ÿ© 15% ÿπŸÜ ÿßŸÑÿ¥Ÿáÿ± ÿßŸÑŸÖÿßÿ∂Ÿä. ŸáŸÑ ÿ™ÿ±ŸäÿØ ŸÜÿµÿßÿ¶ÿ≠ ŸÑÿ™ŸÇŸÑŸäŸÑŸáÿßÿü",
    
    "ÿ£ÿ±ŸäÿØ ÿÆÿ∑ÿ© ÿßÿØÿÆÿßÿ±": "ŸÖŸÖÿ™ÿßÿ≤! ÿ≥ÿ£ÿ∂ÿπ ŸÑŸÉ ÿÆÿ∑ÿ© ÿßÿØÿÆÿßÿ± ÿ∞ŸÉŸäÿ©:\n\nüìä **ÿ™ÿ≠ŸÑŸäŸÑ Ÿàÿ∂ÿπŸÉ ÿßŸÑÿ≠ÿßŸÑŸä:**\n‚Ä¢ ÿßŸÑÿØÿÆŸÑ ÿßŸÑÿ¥Ÿáÿ±Ÿä: 8,000 ÿ±ŸäÿßŸÑ\n‚Ä¢ ÿßŸÑŸÖÿµÿ±ŸàŸÅÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©: 4,000 ÿ±ŸäÿßŸÑ\n‚Ä¢ ÿßŸÑŸÖÿ™ÿßÿ≠ ŸÑŸÑÿßÿØÿÆÿßÿ±: 4,000 ÿ±ŸäÿßŸÑ\n\nüéØ **ÿÆÿ∑ÿ© ÿßŸÑÿßÿØÿÆÿßÿ± ÿßŸÑŸÖŸÇÿ™ÿ±ÿ≠ÿ©:**\n‚Ä¢ ÿßŸÑÿßÿØÿÆÿßÿ± ÿßŸÑÿ¥Ÿáÿ±Ÿä: 1,600 ÿ±ŸäÿßŸÑ (20%)\n‚Ä¢ ÿµŸÜÿØŸàŸÇ ÿßŸÑÿ∑Ÿàÿßÿ±ÿ¶: 800 ÿ±ŸäÿßŸÑ\n‚Ä¢ ÿ£ŸáÿØÿßŸÅ ŸÇÿµŸäÿ±ÿ© ÿßŸÑŸÖÿØŸâ: 500 ÿ±ŸäÿßŸÑ\n‚Ä¢ ÿßÿ≥ÿ™ÿ´ŸÖÿßÿ±ÿßÿ™ ÿ∑ŸàŸäŸÑÿ© ÿßŸÑŸÖÿØŸâ: 300 ÿ±ŸäÿßŸÑ\n\nüí° **ŸÜÿµÿßÿ¶ÿ≠ ŸÑŸÑŸÜÿ¨ÿßÿ≠:**\n‚Ä¢ ÿßÿ¨ÿπŸÑ ÿßŸÑÿßÿØÿÆÿßÿ± ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã\n‚Ä¢ ÿßÿ®ÿØÿ£ ÿ®ŸÖÿ®ÿßŸÑÿ∫ ÿµÿ∫Ÿäÿ±ÿ© Ÿàÿ≤ÿØ ÿ™ÿØÿ±Ÿäÿ¨ŸäÿßŸã\n‚Ä¢ ÿ±ÿßÿ¨ÿπ ÿÆÿ∑ÿ™ŸÉ ÿ¥Ÿáÿ±ŸäÿßŸã\n\nŸáŸÑ ÿ™ÿ±ŸäÿØ ÿ™ŸÅÿπŸäŸÑ Ÿáÿ∞Ÿá ÿßŸÑÿÆÿ∑ÿ©ÿü",
    
    "default": "ÿ¥ŸÉÿ±ÿßŸã ŸÑÿ≥ÿ§ÿßŸÑŸÉ! ŸÉŸÖÿ≥ÿ™ÿ¥ÿßÿ± ŸÖÿßŸÑŸä ÿ∞ŸÉŸäÿå ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ŸÅŸä:\n\n‚Ä¢ ÿ™ÿ≠ŸÑŸäŸÑ ŸÖÿµÿ±ŸàŸÅÿßÿ™ŸÉ Ÿàÿ•Ÿäÿ±ÿßÿØÿßÿ™ŸÉ\n‚Ä¢ Ÿàÿ∂ÿπ ÿÆÿ∑ÿ∑ ÿßÿØÿÆÿßÿ± ŸÖÿÆÿµÿµÿ©\n‚Ä¢ ÿ™ŸÇÿØŸäŸÖ ŸÜÿµÿßÿ¶ÿ≠ ÿßÿ≥ÿ™ÿ´ŸÖÿßÿ±Ÿäÿ©\n‚Ä¢ ŸÖÿ±ÿßŸÇÿ®ÿ© ÿ£ŸáÿØÿßŸÅŸÉ ÿßŸÑŸÖÿßŸÑŸäÿ©\n‚Ä¢ ÿ™ÿ≠ÿ≥ŸäŸÜ ÿπÿßÿØÿßÿ™ŸÉ ÿßŸÑŸÖÿßŸÑŸäÿ©\n\nŸÖÿß ÿßŸÑŸÖŸàÿ∂Ÿàÿπ ÿßŸÑŸÖÿßŸÑŸä ÿßŸÑÿ∞Ÿä ÿ™ÿ±ŸäÿØ ŸÖŸÜÿßŸÇÿ¥ÿ™Ÿáÿü"
};

// Chat functionality
document.addEventListener('DOMContentLoaded', function() {
    const chatInput = document.getElementById('chatInput');
    const sendBtn = document.getElementById('sendBtn');
    const chatMessages = document.getElementById('chatMessages');
    const quickBtns = document.querySelectorAll('.quick-btn');

    // Send message function
    function sendMessage(message) {
        if (!message.trim()) return;

        // Add user message
        addMessage(message, 'user');

        // Clear input
        if (chatInput) chatInput.value = '';

        // Show typing indicator
        showTypingIndicator();

        // Get bot response after delay
        setTimeout(() => {
            hideTypingIndicator();
            const response = getBotResponse(message);
            addMessage(response, 'bot');
        }, 1500);
    }

    // Add message to chat
    function addMessage(text, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}-message`;
        
        const contentDiv = document.createElement('div');
        contentDiv.className = 'message-content';
        contentDiv.textContent = text;
        
        const timeDiv = document.createElement('div');
        timeDiv.className = 'message-time';
        timeDiv.textContent = new Date().toLocaleTimeString('ar-SA', {
            hour: '2-digit',
            minute: '2-digit'
        });
        
        messageDiv.appendChild(contentDiv);
        messageDiv.appendChild(timeDiv);
        
        if (chatMessages) {
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
    }

    // Get bot response
    function getBotResponse(message) {
        const cleanMessage = message.trim();
        
        // Check for exact matches first
        if (botResponses[cleanMessage]) {
            return botResponses[cleanMessage];
        }
        
        // Check for partial matches
        for (const key in botResponses) {
            if (key !== 'default' && cleanMessage.includes(key.substring(0, 5))) {
                return botResponses[key];
            }
        }
        
        return botResponses.default;
    }

    // Show typing indicator
    function showTypingIndicator() {
        const typingDiv = document.createElement('div');
        typingDiv.className = 'message bot-message typing-indicator';
        typingDiv.innerHTML = `
            <div class="message-content">
                <div class="typing-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>
        `;
        
        if (chatMessages) {
            chatMessages.appendChild(typingDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
    }

    // Hide typing indicator
    function hideTypingIndicator() {
        const typingIndicator = document.querySelector('.typing-indicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }

    // Event listeners
    if (sendBtn) {
        sendBtn.addEventListener('click', () => {
            if (chatInput) {
                sendMessage(chatInput.value);
            }
        });
    }

    if (chatInput) {
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage(chatInput.value);
            }
        });
    }

    // Quick question buttons
    quickBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            const question = btn.getAttribute('data-question');
            sendMessage(question);
        });
    });
});

// Voice Assistant functionality
document.addEventListener('DOMContentLoaded', function() {
    const voiceBtn = document.getElementById('voiceBtn');
    const voiceStatus = document.getElementById('voiceStatus');
    let isListening = false;

    // Check if browser supports speech recognition
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    
    if (!SpeechRecognition) {
        if (voiceStatus) {
            voiceStatus.textContent = 'ÿßŸÑŸÖÿ™ÿµŸÅÿ≠ ŸÑÿß ŸäÿØÿπŸÖ ÿßŸÑÿ™ÿπÿ±ŸÅ ÿπŸÑŸâ ÿßŸÑÿµŸàÿ™';
        }
        return;
    }

    const recognition = new SpeechRecognition();
    recognition.lang = 'ar-SA';
    recognition.continuous = false;
    recognition.interimResults = false;

    // Voice responses
    const voiceResponses = {
        "ÿßÿπÿ±ÿ∂ ÿ±ÿµŸäÿØŸä": "ÿ±ÿµŸäÿØŸÉ ÿßŸÑÿ≠ÿßŸÑŸä ŸáŸà 15,000 ÿ±ŸäÿßŸÑ ÿ≥ÿπŸàÿØŸä",
        "ŸÉŸÖ ÿµÿ±ŸÅÿ™ Ÿáÿ∞ÿß ÿßŸÑÿ£ÿ≥ÿ®Ÿàÿπ": "ÿµÿ±ŸÅÿ™ Ÿáÿ∞ÿß ÿßŸÑÿ£ÿ≥ÿ®Ÿàÿπ 1,200 ÿ±ŸäÿßŸÑÿå ÿ®ÿ≤ŸäÿßÿØÿ© 200 ÿ±ŸäÿßŸÑ ÿπŸÜ ÿßŸÑÿ£ÿ≥ÿ®Ÿàÿπ ÿßŸÑŸÖÿßÿ∂Ÿä",
        "ÿßÿπÿ±ÿ∂ ÿ¢ÿÆÿ± ÿßŸÑŸÖÿπÿßŸÖŸÑÿßÿ™": "ÿ¢ÿÆÿ± ŸÖÿπÿßŸÖŸÑÿßÿ™ŸÉ: ÿ¥ÿ±ÿßÿ° ŸÖŸÜ ŸÉÿßÿ±ŸÅŸàÿ± 150 ÿ±ŸäÿßŸÑÿå ÿØŸÅÿπ ŸÅÿßÿ™Ÿàÿ±ÿ© ŸÉŸáÿ±ÿ®ÿßÿ° 300 ÿ±ŸäÿßŸÑÿå ÿ™ÿ≠ŸàŸäŸÑ ŸÑÿ£ÿ≠ŸÖÿØ 500 ÿ±ŸäÿßŸÑ",
        "ŸÅÿπŸÑ ÿßŸÑÿ™ŸÜÿ®ŸäŸáÿßÿ™": "ÿ™ŸÖ ÿ™ŸÅÿπŸäŸÑ ÿßŸÑÿ™ŸÜÿ®ŸäŸáÿßÿ™ ÿßŸÑÿ∞ŸÉŸäÿ© ÿ®ŸÜÿ¨ÿßÿ≠"
    };

    if (voiceBtn) {
        voiceBtn.addEventListener('click', function() {
            if (isListening) {
                stopListening();
            } else {
                startListening();
            }
        });
    }

    function startListening() {
        isListening = true;
        voiceBtn.classList.add('active');
        voiceBtn.querySelector('.pulse-ring').style.opacity = '1';
        
        if (voiceStatus) {
            voiceStatus.textContent = 'ÿ£ÿ≥ÿ™ŸÖÿπ ÿ•ŸÑŸäŸÉ ÿßŸÑÿ¢ŸÜ...';
        }

        recognition.start();
    }

    function stopListening() {
        isListening = false;
        voiceBtn.classList.remove('active');
        
        if (voiceStatus) {
            voiceStatus.textContent = 'ÿßŸÜŸÇÿ± ÿπŸÑŸâ ÿßŸÑŸÖŸäŸÉÿ±ŸàŸÅŸàŸÜ ŸàŸÇŸÑ ÿ£ŸÖÿ±ŸÉ';
        }

        recognition.stop();
    }

    // Speech recognition events
    recognition.onresult = function(event) {
        const transcript = event.results[0][0].transcript;
        
        if (voiceStatus) {
            voiceStatus.textContent = `ÿ≥ŸÖÿπÿ™: "${transcript}"`;
        }

        // Process voice command
        setTimeout(() => {
            processVoiceCommand(transcript);
        }, 1000);
    };

    recognition.onerror = function(event) {
        console.error('Speech recognition error:', event.error);
        if (voiceStatus) {
            voiceStatus.textContent = 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿ™ÿπÿ±ŸÅ ÿπŸÑŸâ ÿßŸÑÿµŸàÿ™. ÿ≠ÿßŸàŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.';
        }
        stopListening();
    };

    recognition.onend = function() {
        stopListening();
    };

    function processVoiceCommand(command) {
        const response = getVoiceResponse(command);
        
        if (voiceStatus) {
            voiceStatus.textContent = response;
        }

        // Use speech synthesis if available
        if ('speechSynthesis' in window) {
            const utterance = new SpeechSynthesisUtterance(response);
            utterance.lang = 'ar-SA';
            speechSynthesis.speak(utterance);
        }
    }

    function getVoiceResponse(command) {
        const cleanCommand = command.trim().toLowerCase();
        
        for (const key in voiceResponses) {
            if (cleanCommand.includes(key) || key.includes(cleanCommand)) {
                return voiceResponses[key];
            }
        }
        
        return "ŸÑŸÖ ÿ£ŸÅŸáŸÖ ÿßŸÑÿ£ŸÖÿ±. ŸäŸÖŸÉŸÜŸÉ ŸÇŸàŸÑ: ÿßÿπÿ±ÿ∂ ÿ±ÿµŸäÿØŸäÿå ÿ£Ÿà ŸÉŸÖ ÿµÿ±ŸÅÿ™ Ÿáÿ∞ÿß ÿßŸÑÿ£ÿ≥ÿ®Ÿàÿπ";
    }
});

// Interactive features demo
document.addEventListener('DOMContentLoaded', function() {
    const interactiveCards = document.querySelectorAll('.interactive-card');
    const modal = document.getElementById('demoModal');
    const modalBody = document.getElementById('modalBody');
    const closeBtn = document.querySelector('.close');

    // Demo content for each feature
    const demoContent = {
        'spending-analysis': `
            <h2><i class="fas fa-chart-pie"></i> ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸÖÿµÿ±ŸàŸÅÿßÿ™</h2>
            <div class="demo-chart">
                <canvas id="spendingChart" width="400" height="200"></canvas>
            </div>
            <div class="analysis-details">
                <h3>ÿ™ÿ≠ŸÑŸäŸÑ ÿ™ŸÅÿµŸäŸÑŸä:</h3>
                <ul>
                    <li><strong>ÿßŸÑÿ∑ÿπÿßŸÖ ŸàÿßŸÑŸÖÿ∑ÿßÿπŸÖ:</strong> 1,200 ÿ±ŸäÿßŸÑ (30%) - ÿ≤ŸäÿßÿØÿ© 15%</li>
                    <li><strong>ÿßŸÑÿ™ÿ≥ŸàŸÇ:</strong> 800 ÿ±ŸäÿßŸÑ (20%) - ÿßŸÜÿÆŸÅÿßÿ∂ 5%</li>
                    <li><strong>ÿßŸÑŸÖŸàÿßÿµŸÑÿßÿ™:</strong> 600 ÿ±ŸäÿßŸÑ (15%) - ŸÖÿ≥ÿ™ŸÇÿ±</li>
                    <li><strong>ÿßŸÑÿ™ÿ±ŸÅŸäŸá:</strong> 500 ÿ±ŸäÿßŸÑ (12.5%) - ÿ≤ŸäÿßÿØÿ© 10%</li>
                    <li><strong>ÿßŸÑŸÅŸàÿßÿ™Ÿäÿ±:</strong> 700 ÿ±ŸäÿßŸÑ (17.5%) - ŸÖÿ≥ÿ™ŸÇÿ±</li>
                </ul>
                <div class="recommendation">
                    <p><i class="fas fa-lightbulb"></i> <strong>ÿ™ŸàÿµŸäÿ©:</strong> ŸäŸÖŸÉŸÜŸÉ ÿ™ŸàŸÅŸäÿ± 300 ÿ±ŸäÿßŸÑ ÿ¥Ÿáÿ±ŸäÿßŸã ÿ®ÿ™ŸÇŸÑŸäŸÑ ŸÖÿµÿ±ŸàŸÅÿßÿ™ ÿßŸÑŸÖÿ∑ÿßÿπŸÖ ŸàÿßŸÑÿ™ÿ±ŸÅŸäŸá.</p>
                </div>
            </div>
        `,
        
        'budget-planner': `
            <h2><i class="fas fa-calculator"></i> ŸÖÿÆÿ∑ÿ∑ ÿßŸÑŸÖŸäÿ≤ÿßŸÜŸäÿ©</h2>
            <div class="budget-form">
                <h3>ÿ£ÿØÿÆŸÑ ŸÖÿπŸÑŸàŸÖÿßÿ™ŸÉ ŸÑÿ•ŸÜÿ¥ÿßÿ° ŸÖŸäÿ≤ÿßŸÜŸäÿ© ÿ∞ŸÉŸäÿ©:</h3>
                <div class="form-group">
                    <label>ÿßŸÑÿØÿÆŸÑ ÿßŸÑÿ¥Ÿáÿ±Ÿä:</label>
                    <input type="number" id="monthlyIncome" placeholder="8000" value="8000">
                </div>
                <div class="form-group">
                    <label>ÿßŸÑÿ£ŸáÿØÿßŸÅ ÿßŸÑŸÖÿßŸÑŸäÿ©:</label>
                    <select id="financialGoals">
                        <option>ÿßÿØÿÆÿßÿ± ŸÑŸÑÿ∑Ÿàÿßÿ±ÿ¶</option>
                        <option>ÿ¥ÿ±ÿßÿ° ÿ≥Ÿäÿßÿ±ÿ©</option>
                        <option>ÿ≥ŸÅÿ±</option>
                        <option>ÿßÿ≥ÿ™ÿ´ŸÖÿßÿ±</option>
                    </select>
                </div>
                <button onclick="generateBudget()" class="btn btn-primary">ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖŸäÿ≤ÿßŸÜŸäÿ©</button>
                <div id="budgetResult" style="margin-top: 20px;"></div>
            </div>
        `,
        
        'savings-goals': `
            <h2><i class="fas fa-target"></i> ÿ£ŸáÿØÿßŸÅ ÿßŸÑÿßÿØÿÆÿßÿ±</h2>
            <div class="savings-goals">
                <div class="goal-item">
                    <h3>ÿµŸÜÿØŸàŸÇ ÿßŸÑÿ∑Ÿàÿßÿ±ÿ¶</h3>
                    <div class="progress-bar">
                        <div class="progress" style="width: 65%;"></div>
                    </div>
                    <p>6,500 / 10,000 ÿ±ŸäÿßŸÑ (65%)</p>
                </div>
                
                <div class="goal-item">
                    <h3>ÿ•ÿ¨ÿßÿ≤ÿ© ÿµŸäŸÅŸäÿ©</h3>
                    <div class="progress-bar">
                        <div class="progress" style="width: 30%;"></div>
                    </div>
                    <p>1,500 / 5,000 ÿ±ŸäÿßŸÑ (30%)</p>
                </div>
                
                <div class="goal-item">
                    <h3>ÿ≥Ÿäÿßÿ±ÿ© ÿ¨ÿØŸäÿØÿ©</h3>
                    <div class="progress-bar">
                        <div class="progress" style="width: 15%;"></div>
                    </div>
                    <p>7,500 / 50,000 ÿ±ŸäÿßŸÑ (15%)</p>
                </div>
                
                <button class="btn btn-primary">ÿ•ÿ∂ÿßŸÅÿ© ŸáÿØŸÅ ÿ¨ÿØŸäÿØ</button>
            </div>
        `,
        
        'notifications': `
            <h2><i class="fas fa-bell"></i> ÿßŸÑÿ™ŸÜÿ®ŸäŸáÿßÿ™ ÿßŸÑÿ∞ŸÉŸäÿ©</h2>
            <div class="notifications-demo">
                <h3>ÿ£ŸÖÿ´ŸÑÿ© ÿπŸÑŸâ ÿßŸÑÿ™ŸÜÿ®ŸäŸáÿßÿ™ ÿßŸÑÿßÿ≥ÿ™ÿ®ÿßŸÇŸäÿ©:</h3>
                
                <div class="notification-item urgent">
                    <i class="fas fa-exclamation-triangle"></i>
                    <div>
                        <h4>ÿ™ŸÜÿ®ŸäŸá ŸÖŸäÿ≤ÿßŸÜŸäÿ©</h4>
                        <p>ÿ™ÿ¨ÿßŸàÿ≤ÿ™ ŸÖŸäÿ≤ÿßŸÜŸäÿ© ÿßŸÑŸÖÿ∑ÿßÿπŸÖ ÿ®ŸÜÿ≥ÿ®ÿ© 25%. ÿßŸÇÿ™ÿ±ÿ≠ ÿ™ŸÇŸÑŸäŸÑ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ Ÿáÿ∞ÿß ÿßŸÑÿ£ÿ≥ÿ®Ÿàÿπ.</p>
                        <small>ŸÖŸÜÿ∞ 5 ÿØŸÇÿßÿ¶ŸÇ</small>
                    </div>
                </div>
                
                <div class="notification-item info">
                    <i class="fas fa-lightbulb"></i>
                    <div>
                        <h4>ŸÅÿ±ÿµÿ© ÿ™ŸàŸÅŸäÿ±</h4>
                        <p>ŸÖÿ™ÿ¨ÿ± ÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäÿßÿ™ ÿ®ÿÆÿµŸÖ 30% ÿπŸÑŸâ ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿßŸÑÿ∞Ÿä ÿ™ÿ®ÿ≠ÿ´ ÿπŸÜŸá. ŸàŸÅÿ± 450 ÿ±ŸäÿßŸÑ!</p>
                        <small>ŸÖŸÜÿ∞ ÿ≥ÿßÿπÿ©</small>
                    </div>
                </div>
                
                <div class="notification-item success">
                    <i class="fas fa-check-circle"></i>
                    <div>
                        <h4>ÿ™ÿ≠ŸÇŸäŸÇ ŸáÿØŸÅ</h4>
                        <p>ŸÖÿ®ÿ±ŸàŸÉ! ŸàÿµŸÑÿ™ ŸÑŸÄ 65% ŸÖŸÜ ŸáÿØŸÅ ÿµŸÜÿØŸàŸÇ ÿßŸÑÿ∑Ÿàÿßÿ±ÿ¶. ÿßÿ≥ÿ™ŸÖÿ± ÿπŸÑŸâ Ÿáÿ∞ÿß ÿßŸÑŸÖÿπÿØŸÑ!</p>
                        <small>ÿ£ŸÖÿ≥</small>
                    </div>
                </div>
                
                <div class="notification-settings">
                    <h4>ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑÿ™ŸÜÿ®ŸäŸáÿßÿ™:</h4>
                    <label><input type="checkbox" checked> ÿ™ŸÜÿ®ŸäŸáÿßÿ™ ÿßŸÑŸÖŸäÿ≤ÿßŸÜŸäÿ©</label>
                    <label><input type="checkbox" checked> ÿ™ŸÜÿ®ŸäŸáÿßÿ™ ÿßŸÑÿπÿ±Ÿàÿ∂</label>
                    <label><input type="checkbox"> ÿ™ŸÜÿ®ŸäŸáÿßÿ™ ÿßŸÑŸÅŸàÿßÿ™Ÿäÿ±</label>
                    <label><input type="checkbox" checked> ÿ™ŸÜÿ®ŸäŸáÿßÿ™ ÿßŸÑÿ£ŸáÿØÿßŸÅ</label>
                </div>
            </div>
        `
    };

    // Handle interactive card clicks
    interactiveCards.forEach(card => {
        card.addEventListener('click', function() {
            const feature = this.getAttribute('data-feature');
            if (demoContent[feature]) {
                modalBody.innerHTML = demoContent[feature];
                modal.style.display = 'block';
                
                // Add specific functionality for budget planner
                if (feature === 'budget-planner') {
                    window.generateBudget = function() {
                        const income = document.getElementById('monthlyIncome').value;
                        const goal = document.getElementById('financialGoals').value;
                        
                        const result = document.getElementById('budgetResult');
                        result.innerHTML = `
                            <div class="budget-breakdown">
                                <h4>ŸÖŸäÿ≤ÿßŸÜŸäÿ™ŸÉ ÿßŸÑŸÖŸÇÿ™ÿ±ÿ≠ÿ©:</h4>
                                <div class="budget-item">
                                    <span>ÿßŸÑÿßÿ≠ÿ™Ÿäÿßÿ¨ÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ© (50%):</span>
                                    <strong>${income * 0.5} ÿ±ŸäÿßŸÑ</strong>
                                </div>
                                <div class="budget-item">
                                    <span>ÿßŸÑÿ±ÿ∫ÿ®ÿßÿ™ (30%):</span>
                                    <strong>${income * 0.3} ÿ±ŸäÿßŸÑ</strong>
                                </div>
                                <div class="budget-item">
                                    <span>ÿßŸÑÿßÿØÿÆÿßÿ± Ÿà${goal} (20%):</span>
                                    <strong>${income * 0.2} ÿ±ŸäÿßŸÑ</strong>
                                </div>
                            </div>
                        `;
                    };
                }
            }
        });
    });

    // Close modal
    if (closeBtn) {
        closeBtn.addEventListener('click', function() {
            modal.style.display = 'none';
        });
    }

    // Close modal when clicking outside
    window.addEventListener('click', function(event) {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });
});

// Add typing animation styles
const typingStyles = document.createElement('style');
typingStyles.textContent = `
    .typing-dots {
        display: flex;
        gap: 4px;
        align-items: center;
    }
    
    .typing-dots span {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #2d8f5f;
        animation: typing 1.4s infinite ease-in-out;
    }
    
    .typing-dots span:nth-child(1) { animation-delay: 0s; }
    .typing-dots span:nth-child(2) { animation-delay: 0.2s; }
    .typing-dots span:nth-child(3) { animation-delay: 0.4s; }
    
    @keyframes typing {
        0%, 60%, 100% {
            transform: scale(1);
            opacity: 0.5;
        }
        30% {
            transform: scale(1.2);
            opacity: 1;
        }
    }
    
    .budget-breakdown {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        margin-top: 1rem;
    }
    
    .budget-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
        padding: 0.5rem 0;
        border-bottom: 1px solid #eee;
    }
    
    .progress-bar {
        width: 100%;
        height: 20px;
        background: #eee;
        border-radius: 10px;
        overflow: hidden;
        margin: 0.5rem 0;
    }
    
    .progress {
        height: 100%;
        background: linear-gradient(45deg, #1a5f3f, #2d8f5f);
        transition: width 0.3s ease;
    }
    
    .goal-item {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 1rem;
    }
    
    .notification-item {
        display: flex;
        gap: 1rem;
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 1rem;
        border-left: 4px solid;
    }
    
    .notification-item.urgent {
        background: #fff5f5;
        border-color: #e53e3e;
    }
    
    .notification-item.info {
        background: #f0f8ff;
        border-color: #3182ce;
    }
    
    .notification-item.success {
        background: #f0fff4;
        border-color: #38a169;
    }
    
    .notification-item i {
        font-size: 1.5rem;
        margin-top: 0.2rem;
    }
    
    .notification-item.urgent i { color: #e53e3e; }
    .notification-item.info i { color: #3182ce; }
    .notification-item.success i { color: #38a169; }
    
    .notification-settings {
        margin-top: 2rem;
        padding-top: 1rem;
        border-top: 1px solid #eee;
    }
    
    .notification-settings label {
        display: block;
        margin-bottom: 0.5rem;
        cursor: pointer;
    }
    
    .form-group {
        margin-bottom: 1rem;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 600;
    }
    
    .form-group input,
    .form-group select {
        width: 100%;
        padding: 0.8rem;
        border: 2px solid #eee;
        border-radius: 8px;
        font-size: 1rem;
    }
    
    .form-group input:focus,
    .form-group select:focus {
        outline: none;
        border-color: #2d8f5f;
    }
`;

document.head.appendChild(typingStyles);
